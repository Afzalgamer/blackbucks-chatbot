# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iskfXlpCgt9xkzKet3REqLhUtK9qXfqq
"""

import google.generativeai as genai
import os
from datetime import datetime

class SimpleChatbot:
    def __init__(self, api_key):
        genai.configure(api_key=api_key)
        self.model = None
        self.model_name = None
        self._initialize_model()
        self.chat_history = []

    def _initialize_model(self):
        try:
            models = genai.list_models()
            available_models = []

            for model in models:
                if 'generateContent' in model.supported_generation_methods:
                    available_models.append(model.name)

            if not available_models:
                raise Exception("No suitable models found for content generation")

            preferred_models = [
                'models/gemini-1.5-flash',
                'models/gemini-1.5-pro',
                'models/gemini-pro',
                'models/gemini-1.0-pro'
            ]

            for preferred in preferred_models:
                if preferred in available_models:
                    self.model_name = preferred
                    self.model = genai.GenerativeModel(preferred)
                    print(f"‚úÖ Using model: {preferred}")
                    return

            self.model_name = available_models[0]
            self.model = genai.GenerativeModel(available_models[0])
            print(f"‚úÖ Using model: {available_models[0]}")

        except Exception as e:
            print(f"‚ùå Error initializing model: {str(e)}")
            print("Available models:")
            try:
                for model in genai.list_models():
                    print(f"  - {model.name} (supports: {model.supported_generation_methods})")
            except:
                print("  Could not list models")
            raise

    def get_response(self, user_input):
        try:
            if not self.model:
                return "Sorry, no model is available. Please check your API key and connection."

            response = self.model.generate_content(user_input)

            if hasattr(response, 'text') and response.text:
                return response.text
            else:
                return "Sorry, I couldn't generate a response. Please try rephrasing your message."

        except Exception as e:
            return f"Sorry, I encountered an error: {str(e)}"

    def save_chat_history(self, user_input, bot_response):
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.chat_history.append({
            'timestamp': timestamp,
            'user': user_input,
            'bot': bot_response
        })

    def display_history(self):
        if not self.chat_history:
            print("No chat history available.")
            return

        print("\n--- Chat History ---")
        for entry in self.chat_history:
            print(f"[{entry['timestamp']}]")
            print(f"You: {entry['user']}")
            print(f"Bot: {entry['bot']}\n")

    def export_history(self, filename=None):
        if not self.chat_history:
            print("No chat history to export.")
            return

        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"chat_history_{timestamp}.txt"

        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write("Chat History Export\n")
                f.write("=" * 50 + "\n\n")

                for entry in self.chat_history:
                    f.write(f"[{entry['timestamp']}]\n")
                    f.write(f"You: {entry['user']}\n")
                    f.write(f"Bot: {entry['bot']}\n\n")

            print(f"‚úÖ Chat history exported to: {filename}")
        except Exception as e:
            print(f"‚ùå Error exporting history: {str(e)}")

    def run(self):
        print("ü§ñ Simple Gemini Chatbot")
        print("=" * 40)

        if not self.model:
            print("‚ùå Failed to initialize chatbot. Please check your API key and try again.")
            return

        print("Commands:")
        print("- Type 'quit' or 'exit' to end the conversation")
        print("- Type 'history' to view chat history")
        print("- Type 'clear' to clear chat history")
        print("- Type 'export' to export chat history to file")
        print("- Type 'models' to list available models")
        print("=" * 40)

        while True:
            try:
                user_input = input("\nYou: ").strip()

                if user_input.lower() in ['quit', 'exit', 'bye']:
                    print("Bot: Goodbye! Thanks for chatting! üëã")
                    break

                elif user_input.lower() == 'history':
                    self.display_history()
                    continue

                elif user_input.lower() == 'clear':
                    self.chat_history.clear()
                    print("Chat history cleared! üóë")
                    continue

                elif user_input.lower() == 'export':
                    self.export_history()
                    continue

                elif user_input.lower() == 'models':
                    self.list_available_models()
                    continue

                elif not user_input:
                    print("Bot: Please enter a message!")
                    continue

                print("Bot: Thinking...")
                response = self.get_response(user_input)
                print(f"Bot: {response}")

                self.save_chat_history(user_input, response)

            except KeyboardInterrupt:
                print("\n\nBot: Goodbye! Thanks for chatting! üëã")
                break
            except Exception as e:
                print(f"An error occurred: {str(e)}")

    def list_available_models(self):
        try:
            print("\n--- Available Models ---")
            models = genai.list_models()
            for model in models:
                status = "‚úÖ" if 'generateContent' in model.supported_generation_methods else "‚ùå"
                current = " (CURRENT)" if model.name == self.model_name else ""
                print(f"{status} {model.name}{current}")
                print(f"    Supports: {', '.join(model.supported_generation_methods)}")
        except Exception as e:
            print(f"Error listing models: {str(e)}")

def main():
    api_key = 'AIzaSyDFeMRe69DjRRg5QRdTBLKPCwMlspMlLLo'

    try:
        chatbot = SimpleChatbot(api_key)
        chatbot.run()
    except Exception as e:
        print(f"‚ùå Failed to start chatbot: {str(e)}")

if __name__ == "__main__":
    try:
        import google.generativeai as genai
    except ImportError:
        print("‚ùå Error: google-generativeai library is not installed.")
        print("Please install it using: pip install google-generativeai")
        exit(1)

    main()